// Code generated by MockGen. DO NOT EDIT.
// Source: image.go

// Package mock_media is a generated GoMock package.
package mock_media

import (
	context "context"
	image "image"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	media "github.com/modernice/cms/media"
)

// MockImageService is a mock of ImageService interface.
type MockImageService struct {
	ctrl     *gomock.Controller
	recorder *MockImageServiceMockRecorder
}

// MockImageServiceMockRecorder is the mock recorder for MockImageService.
type MockImageServiceMockRecorder struct {
	mock *MockImageService
}

// NewMockImageService creates a new mock instance.
func NewMockImageService(ctrl *gomock.Controller) *MockImageService {
	mock := &MockImageService{ctrl: ctrl}
	mock.recorder = &MockImageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageService) EXPECT() *MockImageServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockImageService) Delete(arg0 context.Context, disk, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, disk, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockImageServiceMockRecorder) Delete(arg0, disk, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImageService)(nil).Delete), arg0, disk, path)
}

// Download mocks base method.
func (m *MockImageService) Download(arg0 context.Context, disk, path string) (image.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", arg0, disk, path)
	ret0, _ := ret[0].(image.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockImageServiceMockRecorder) Download(arg0, disk, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockImageService)(nil).Download), arg0, disk, path)
}

// Rename mocks base method.
func (m *MockImageService) Rename(arg0 context.Context, name, disk, path string) (media.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", arg0, name, disk, path)
	ret0, _ := ret[0].(media.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rename indicates an expected call of Rename.
func (mr *MockImageServiceMockRecorder) Rename(arg0, name, disk, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockImageService)(nil).Rename), arg0, name, disk, path)
}

// Replace mocks base method.
func (m *MockImageService) Replace(arg0 context.Context, arg1 io.Reader, disk, path string) (media.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1, disk, path)
	ret0, _ := ret[0].(media.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replace indicates an expected call of Replace.
func (mr *MockImageServiceMockRecorder) Replace(arg0, arg1, disk, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockImageService)(nil).Replace), arg0, arg1, disk, path)
}

// Tag mocks base method.
func (m *MockImageService) Tag(arg0 context.Context, disk, path string, tags ...string) (media.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, disk, path}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tag", varargs...)
	ret0, _ := ret[0].(media.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tag indicates an expected call of Tag.
func (mr *MockImageServiceMockRecorder) Tag(arg0, disk, path interface{}, tags ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, disk, path}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockImageService)(nil).Tag), varargs...)
}

// Untag mocks base method.
func (m *MockImageService) Untag(arg0 context.Context, disk, path string, tags ...string) (media.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, disk, path}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Untag", varargs...)
	ret0, _ := ret[0].(media.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Untag indicates an expected call of Untag.
func (mr *MockImageServiceMockRecorder) Untag(arg0, disk, path interface{}, tags ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, disk, path}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Untag", reflect.TypeOf((*MockImageService)(nil).Untag), varargs...)
}

// Upload mocks base method.
func (m *MockImageService) Upload(arg0 context.Context, arg1 io.Reader, name, disk, path string) (media.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0, arg1, name, disk, path)
	ret0, _ := ret[0].(media.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockImageServiceMockRecorder) Upload(arg0, arg1, name, disk, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockImageService)(nil).Upload), arg0, arg1, name, disk, path)
}

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockImageRepository) Delete(arg0 context.Context, disk, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, disk, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockImageRepositoryMockRecorder) Delete(arg0, disk, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImageRepository)(nil).Delete), arg0, disk, path)
}

// Get mocks base method.
func (m *MockImageRepository) Get(arg0 context.Context, disk, path string) (media.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, disk, path)
	ret0, _ := ret[0].(media.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImageRepositoryMockRecorder) Get(arg0, disk, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImageRepository)(nil).Get), arg0, disk, path)
}

// Save mocks base method.
func (m *MockImageRepository) Save(arg0 context.Context, arg1 media.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockImageRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockImageRepository)(nil).Save), arg0, arg1)
}
