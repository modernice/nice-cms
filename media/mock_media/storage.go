// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_media is a generated GoMock package.
package mock_media

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	media "github.com/modernice/nice-cms/media"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Disk mocks base method.
func (m *MockStorage) Disk(arg0 string) (media.StorageDisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disk", arg0)
	ret0, _ := ret[0].(media.StorageDisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disk indicates an expected call of Disk.
func (mr *MockStorageMockRecorder) Disk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disk", reflect.TypeOf((*MockStorage)(nil).Disk), arg0)
}

// MockStorageDisk is a mock of StorageDisk interface.
type MockStorageDisk struct {
	ctrl     *gomock.Controller
	recorder *MockStorageDiskMockRecorder
}

// MockStorageDiskMockRecorder is the mock recorder for MockStorageDisk.
type MockStorageDiskMockRecorder struct {
	mock *MockStorageDisk
}

// NewMockStorageDisk creates a new mock instance.
func NewMockStorageDisk(ctrl *gomock.Controller) *MockStorageDisk {
	mock := &MockStorageDisk{ctrl: ctrl}
	mock.recorder = &MockStorageDiskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageDisk) EXPECT() *MockStorageDiskMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStorageDisk) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageDiskMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageDisk)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockStorageDisk) Get(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageDiskMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageDisk)(nil).Get), arg0, arg1)
}

// Put mocks base method.
func (m *MockStorageDisk) Put(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockStorageDiskMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStorageDisk)(nil).Put), arg0, arg1, arg2)
}
