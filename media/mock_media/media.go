// Code generated by MockGen. DO NOT EDIT.
// Source: media.go

// Package mock_media is a generated GoMock package.
package mock_media

import (
	image "image"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageEncoder is a mock of ImageEncoder interface.
type MockImageEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockImageEncoderMockRecorder
}

// MockImageEncoderMockRecorder is the mock recorder for MockImageEncoder.
type MockImageEncoderMockRecorder struct {
	mock *MockImageEncoder
}

// NewMockImageEncoder creates a new mock instance.
func NewMockImageEncoder(ctrl *gomock.Controller) *MockImageEncoder {
	mock := &MockImageEncoder{ctrl: ctrl}
	mock.recorder = &MockImageEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageEncoder) EXPECT() *MockImageEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockImageEncoder) Encode(arg0 io.Writer, arg1 image.Image, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockImageEncoderMockRecorder) Encode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockImageEncoder)(nil).Encode), arg0, arg1, arg2)
}
