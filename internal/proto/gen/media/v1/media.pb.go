// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.3
// source: media.proto

package protomedia

import (
	v1 "github.com/modernice/nice-cms/internal/proto/gen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StorageFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Disk     string   `protobuf:"bytes,2,opt,name=disk,proto3" json:"disk,omitempty"`
	Path     string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Filesize int64    `protobuf:"varint,4,opt,name=filesize,proto3" json:"filesize,omitempty"`
	Tags     []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *StorageFile) Reset() {
	*x = StorageFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageFile) ProtoMessage() {}

func (x *StorageFile) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageFile.ProtoReflect.Descriptor instead.
func (*StorageFile) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{0}
}

func (x *StorageFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StorageFile) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

func (x *StorageFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *StorageFile) GetFilesize() int64 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

func (x *StorageFile) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type StorageImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File   *StorageFile `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Width  int64        `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height int64        `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *StorageImage) Reset() {
	*x = StorageImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageImage) ProtoMessage() {}

func (x *StorageImage) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageImage.ProtoReflect.Descriptor instead.
func (*StorageImage) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{1}
}

func (x *StorageImage) GetFile() *StorageFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *StorageImage) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *StorageImage) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type StorageDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *StorageFile `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *StorageDocument) Reset() {
	*x = StorageDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageDocument) ProtoMessage() {}

func (x *StorageDocument) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageDocument.ProtoReflect.Descriptor instead.
func (*StorageDocument) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{2}
}

func (x *StorageDocument) GetFile() *StorageFile {
	if x != nil {
		return x.File
	}
	return nil
}

type UploadDocumentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UploadData:
	//	*UploadDocumentReq_Metadata
	//	*UploadDocumentReq_Chunk
	UploadData isUploadDocumentReq_UploadData `protobuf_oneof:"upload_data"`
}

func (x *UploadDocumentReq) Reset() {
	*x = UploadDocumentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDocumentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDocumentReq) ProtoMessage() {}

func (x *UploadDocumentReq) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDocumentReq.ProtoReflect.Descriptor instead.
func (*UploadDocumentReq) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{3}
}

func (m *UploadDocumentReq) GetUploadData() isUploadDocumentReq_UploadData {
	if m != nil {
		return m.UploadData
	}
	return nil
}

func (x *UploadDocumentReq) GetMetadata() *UploadDocumentReq_UploadDocumentMetadata {
	if x, ok := x.GetUploadData().(*UploadDocumentReq_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *UploadDocumentReq) GetChunk() []byte {
	if x, ok := x.GetUploadData().(*UploadDocumentReq_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isUploadDocumentReq_UploadData interface {
	isUploadDocumentReq_UploadData()
}

type UploadDocumentReq_Metadata struct {
	Metadata *UploadDocumentReq_UploadDocumentMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type UploadDocumentReq_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*UploadDocumentReq_Metadata) isUploadDocumentReq_UploadData() {}

func (*UploadDocumentReq_Chunk) isUploadDocumentReq_UploadData() {}

type ReplaceDocumentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReplaceData:
	//	*ReplaceDocumentReq_Metadata
	//	*ReplaceDocumentReq_Chunk
	ReplaceData isReplaceDocumentReq_ReplaceData `protobuf_oneof:"replace_data"`
}

func (x *ReplaceDocumentReq) Reset() {
	*x = ReplaceDocumentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceDocumentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceDocumentReq) ProtoMessage() {}

func (x *ReplaceDocumentReq) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceDocumentReq.ProtoReflect.Descriptor instead.
func (*ReplaceDocumentReq) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{4}
}

func (m *ReplaceDocumentReq) GetReplaceData() isReplaceDocumentReq_ReplaceData {
	if m != nil {
		return m.ReplaceData
	}
	return nil
}

func (x *ReplaceDocumentReq) GetMetadata() *ReplaceDocumentReq_ReplaceDocumentMetadata {
	if x, ok := x.GetReplaceData().(*ReplaceDocumentReq_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *ReplaceDocumentReq) GetChunk() []byte {
	if x, ok := x.GetReplaceData().(*ReplaceDocumentReq_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isReplaceDocumentReq_ReplaceData interface {
	isReplaceDocumentReq_ReplaceData()
}

type ReplaceDocumentReq_Metadata struct {
	Metadata *ReplaceDocumentReq_ReplaceDocumentMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type ReplaceDocumentReq_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*ReplaceDocumentReq_Metadata) isReplaceDocumentReq_ReplaceData() {}

func (*ReplaceDocumentReq_Chunk) isReplaceDocumentReq_ReplaceData() {}

type Shelf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *v1.UUID         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Documents []*ShelfDocument `protobuf:"bytes,3,rep,name=documents,proto3" json:"documents,omitempty"`
}

func (x *Shelf) Reset() {
	*x = Shelf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shelf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shelf) ProtoMessage() {}

func (x *Shelf) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shelf.ProtoReflect.Descriptor instead.
func (*Shelf) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{5}
}

func (x *Shelf) GetId() *v1.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shelf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Shelf) GetDocuments() []*ShelfDocument {
	if x != nil {
		return x.Documents
	}
	return nil
}

type ShelfDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document   *StorageDocument `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	Id         *v1.UUID         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	UniqueName string           `protobuf:"bytes,3,opt,name=uniqueName,proto3" json:"uniqueName,omitempty"`
}

func (x *ShelfDocument) Reset() {
	*x = ShelfDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShelfDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShelfDocument) ProtoMessage() {}

func (x *ShelfDocument) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShelfDocument.ProtoReflect.Descriptor instead.
func (*ShelfDocument) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{6}
}

func (x *ShelfDocument) GetDocument() *StorageDocument {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *ShelfDocument) GetId() *v1.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ShelfDocument) GetUniqueName() string {
	if x != nil {
		return x.UniqueName
	}
	return ""
}

type LookupGalleryStackByNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId *v1.UUID `protobuf:"bytes,1,opt,name=galleryId,proto3" json:"galleryId,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LookupGalleryStackByNameReq) Reset() {
	*x = LookupGalleryStackByNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupGalleryStackByNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupGalleryStackByNameReq) ProtoMessage() {}

func (x *LookupGalleryStackByNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupGalleryStackByNameReq.ProtoReflect.Descriptor instead.
func (*LookupGalleryStackByNameReq) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{7}
}

func (x *LookupGalleryStackByNameReq) GetGalleryId() *v1.UUID {
	if x != nil {
		return x.GalleryId
	}
	return nil
}

func (x *LookupGalleryStackByNameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UploadImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UploadData:
	//	*UploadImageReq_Metadata
	//	*UploadImageReq_Chunk
	UploadData isUploadImageReq_UploadData `protobuf_oneof:"upload_data"`
}

func (x *UploadImageReq) Reset() {
	*x = UploadImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageReq) ProtoMessage() {}

func (x *UploadImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageReq.ProtoReflect.Descriptor instead.
func (*UploadImageReq) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{8}
}

func (m *UploadImageReq) GetUploadData() isUploadImageReq_UploadData {
	if m != nil {
		return m.UploadData
	}
	return nil
}

func (x *UploadImageReq) GetMetadata() *UploadImageReq_UploadImageMetadata {
	if x, ok := x.GetUploadData().(*UploadImageReq_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *UploadImageReq) GetChunk() []byte {
	if x, ok := x.GetUploadData().(*UploadImageReq_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isUploadImageReq_UploadData interface {
	isUploadImageReq_UploadData()
}

type UploadImageReq_Metadata struct {
	Metadata *UploadImageReq_UploadImageMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type UploadImageReq_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*UploadImageReq_Metadata) isUploadImageReq_UploadData() {}

func (*UploadImageReq_Chunk) isUploadImageReq_UploadData() {}

type ReplaceImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReplaceData:
	//	*ReplaceImageReq_Metadata
	//	*ReplaceImageReq_Chunk
	ReplaceData isReplaceImageReq_ReplaceData `protobuf_oneof:"replace_data"`
}

func (x *ReplaceImageReq) Reset() {
	*x = ReplaceImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceImageReq) ProtoMessage() {}

func (x *ReplaceImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceImageReq.ProtoReflect.Descriptor instead.
func (*ReplaceImageReq) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{9}
}

func (m *ReplaceImageReq) GetReplaceData() isReplaceImageReq_ReplaceData {
	if m != nil {
		return m.ReplaceData
	}
	return nil
}

func (x *ReplaceImageReq) GetMetadata() *ReplaceImageReq_ReplaceImageMetadata {
	if x, ok := x.GetReplaceData().(*ReplaceImageReq_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *ReplaceImageReq) GetChunk() []byte {
	if x, ok := x.GetReplaceData().(*ReplaceImageReq_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isReplaceImageReq_ReplaceData interface {
	isReplaceImageReq_ReplaceData()
}

type ReplaceImageReq_Metadata struct {
	Metadata *ReplaceImageReq_ReplaceImageMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type ReplaceImageReq_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*ReplaceImageReq_Metadata) isReplaceImageReq_ReplaceData() {}

func (*ReplaceImageReq_Chunk) isReplaceImageReq_ReplaceData() {}

type FetchGalleryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *v1.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FetchGalleryReq) Reset() {
	*x = FetchGalleryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchGalleryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchGalleryReq) ProtoMessage() {}

func (x *FetchGalleryReq) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchGalleryReq.ProtoReflect.Descriptor instead.
func (*FetchGalleryReq) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{10}
}

func (x *FetchGalleryReq) GetId() *v1.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

type Gallery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *v1.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Stacks []*Stack `protobuf:"bytes,3,rep,name=stacks,proto3" json:"stacks,omitempty"`
}

func (x *Gallery) Reset() {
	*x = Gallery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gallery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gallery) ProtoMessage() {}

func (x *Gallery) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gallery.ProtoReflect.Descriptor instead.
func (*Gallery) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{11}
}

func (x *Gallery) GetId() *v1.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Gallery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Gallery) GetStacks() []*Stack {
	if x != nil {
		return x.Stacks
	}
	return nil
}

type Stack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *v1.UUID      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Images []*StackImage `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *Stack) Reset() {
	*x = Stack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stack) ProtoMessage() {}

func (x *Stack) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stack.ProtoReflect.Descriptor instead.
func (*Stack) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{12}
}

func (x *Stack) GetId() *v1.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Stack) GetImages() []*StackImage {
	if x != nil {
		return x.Images
	}
	return nil
}

type StackImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image    *StorageImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Original bool          `protobuf:"varint,2,opt,name=original,proto3" json:"original,omitempty"`
	Size     string        `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *StackImage) Reset() {
	*x = StackImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackImage) ProtoMessage() {}

func (x *StackImage) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackImage.ProtoReflect.Descriptor instead.
func (*StackImage) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{13}
}

func (x *StackImage) GetImage() *StorageImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *StackImage) GetOriginal() bool {
	if x != nil {
		return x.Original
	}
	return false
}

func (x *StackImage) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

type UploadDocumentReq_UploadDocumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShelfId    *v1.UUID `protobuf:"bytes,1,opt,name=shelfId,proto3" json:"shelfId,omitempty"`
	UniqueName string   `protobuf:"bytes,2,opt,name=uniqueName,proto3" json:"uniqueName,omitempty"`
	Name       string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Disk       string   `protobuf:"bytes,4,opt,name=disk,proto3" json:"disk,omitempty"`
	Path       string   `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *UploadDocumentReq_UploadDocumentMetadata) Reset() {
	*x = UploadDocumentReq_UploadDocumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDocumentReq_UploadDocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDocumentReq_UploadDocumentMetadata) ProtoMessage() {}

func (x *UploadDocumentReq_UploadDocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDocumentReq_UploadDocumentMetadata.ProtoReflect.Descriptor instead.
func (*UploadDocumentReq_UploadDocumentMetadata) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{3, 0}
}

func (x *UploadDocumentReq_UploadDocumentMetadata) GetShelfId() *v1.UUID {
	if x != nil {
		return x.ShelfId
	}
	return nil
}

func (x *UploadDocumentReq_UploadDocumentMetadata) GetUniqueName() string {
	if x != nil {
		return x.UniqueName
	}
	return ""
}

func (x *UploadDocumentReq_UploadDocumentMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadDocumentReq_UploadDocumentMetadata) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

func (x *UploadDocumentReq_UploadDocumentMetadata) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ReplaceDocumentReq_ReplaceDocumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShelfId    *v1.UUID `protobuf:"bytes,1,opt,name=shelfId,proto3" json:"shelfId,omitempty"`
	DocumentId *v1.UUID `protobuf:"bytes,2,opt,name=documentId,proto3" json:"documentId,omitempty"`
}

func (x *ReplaceDocumentReq_ReplaceDocumentMetadata) Reset() {
	*x = ReplaceDocumentReq_ReplaceDocumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceDocumentReq_ReplaceDocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceDocumentReq_ReplaceDocumentMetadata) ProtoMessage() {}

func (x *ReplaceDocumentReq_ReplaceDocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceDocumentReq_ReplaceDocumentMetadata.ProtoReflect.Descriptor instead.
func (*ReplaceDocumentReq_ReplaceDocumentMetadata) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ReplaceDocumentReq_ReplaceDocumentMetadata) GetShelfId() *v1.UUID {
	if x != nil {
		return x.ShelfId
	}
	return nil
}

func (x *ReplaceDocumentReq_ReplaceDocumentMetadata) GetDocumentId() *v1.UUID {
	if x != nil {
		return x.DocumentId
	}
	return nil
}

type UploadImageReq_UploadImageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId *v1.UUID `protobuf:"bytes,1,opt,name=galleryId,proto3" json:"galleryId,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Disk      string   `protobuf:"bytes,3,opt,name=disk,proto3" json:"disk,omitempty"`
	Path      string   `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *UploadImageReq_UploadImageMetadata) Reset() {
	*x = UploadImageReq_UploadImageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageReq_UploadImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageReq_UploadImageMetadata) ProtoMessage() {}

func (x *UploadImageReq_UploadImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageReq_UploadImageMetadata.ProtoReflect.Descriptor instead.
func (*UploadImageReq_UploadImageMetadata) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UploadImageReq_UploadImageMetadata) GetGalleryId() *v1.UUID {
	if x != nil {
		return x.GalleryId
	}
	return nil
}

func (x *UploadImageReq_UploadImageMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadImageReq_UploadImageMetadata) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

func (x *UploadImageReq_UploadImageMetadata) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ReplaceImageReq_ReplaceImageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GalleryId *v1.UUID `protobuf:"bytes,1,opt,name=galleryId,proto3" json:"galleryId,omitempty"`
	StackId   *v1.UUID `protobuf:"bytes,2,opt,name=stackId,proto3" json:"stackId,omitempty"`
}

func (x *ReplaceImageReq_ReplaceImageMetadata) Reset() {
	*x = ReplaceImageReq_ReplaceImageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceImageReq_ReplaceImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceImageReq_ReplaceImageMetadata) ProtoMessage() {}

func (x *ReplaceImageReq_ReplaceImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceImageReq_ReplaceImageMetadata.ProtoReflect.Descriptor instead.
func (*ReplaceImageReq_ReplaceImageMetadata) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ReplaceImageReq_ReplaceImageMetadata) GetGalleryId() *v1.UUID {
	if x != nil {
		return x.GalleryId
	}
	return nil
}

func (x *ReplaceImageReq_ReplaceImageMetadata) GetStackId() *v1.UUID {
	if x != nil {
		return x.StackId
	}
	return nil
}

var File_media_proto protoreflect.FileDescriptor

var file_media_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6e,
	0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x1a,
	0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0x6f, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x44, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x11, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x58, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x1a, 0xa7, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x07,
	0x73, 0x68, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa0, 0x02, 0x0a, 0x12, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x5a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x85, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x73, 0x68, 0x65,
	0x6c, 0x66, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63,
	0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83, 0x01,
	0x0a, 0x05, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d,
	0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x66,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d,
	0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x68, 0x0a,
	0x1b, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x09,
	0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x52, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6e,
	0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x88, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35,
	0x0a, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x92, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x54, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x1a, 0x80, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x09, 0x67,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x77, 0x0a, 0x07, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63,
	0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65,
	0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x66, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e,
	0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x72, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x32, 0xbe, 0x05, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x6e,
	0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x1a, 0x1d, 0x2e, 0x6e, 0x69,
	0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x0e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x6e,
	0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x28, 0x01, 0x12, 0x5a, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d,
	0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x01,
	0x12, 0x53, 0x0a, 0x13, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x1a, 0x1d, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x18, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x47,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x47, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4a, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x28, 0x01, 0x12, 0x4c, 0x0a, 0x0c, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x6e, 0x69,
	0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x28, 0x01, 0x12, 0x4c, 0x0a, 0x0c, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x6e, 0x69, 0x63, 0x65,
	0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6e,
	0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x69, 0x63, 0x65, 0x2f,
	0x6e, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6d, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_media_proto_rawDescOnce sync.Once
	file_media_proto_rawDescData = file_media_proto_rawDesc
)

func file_media_proto_rawDescGZIP() []byte {
	file_media_proto_rawDescOnce.Do(func() {
		file_media_proto_rawDescData = protoimpl.X.CompressGZIP(file_media_proto_rawDescData)
	})
	return file_media_proto_rawDescData
}

var file_media_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_media_proto_goTypes = []interface{}{
	(*StorageFile)(nil),                                // 0: nicecms.media.v1.StorageFile
	(*StorageImage)(nil),                               // 1: nicecms.media.v1.StorageImage
	(*StorageDocument)(nil),                            // 2: nicecms.media.v1.StorageDocument
	(*UploadDocumentReq)(nil),                          // 3: nicecms.media.v1.UploadDocumentReq
	(*ReplaceDocumentReq)(nil),                         // 4: nicecms.media.v1.ReplaceDocumentReq
	(*Shelf)(nil),                                      // 5: nicecms.media.v1.Shelf
	(*ShelfDocument)(nil),                              // 6: nicecms.media.v1.ShelfDocument
	(*LookupGalleryStackByNameReq)(nil),                // 7: nicecms.media.v1.LookupGalleryStackByNameReq
	(*UploadImageReq)(nil),                             // 8: nicecms.media.v1.UploadImageReq
	(*ReplaceImageReq)(nil),                            // 9: nicecms.media.v1.ReplaceImageReq
	(*FetchGalleryReq)(nil),                            // 10: nicecms.media.v1.FetchGalleryReq
	(*Gallery)(nil),                                    // 11: nicecms.media.v1.Gallery
	(*Stack)(nil),                                      // 12: nicecms.media.v1.Stack
	(*StackImage)(nil),                                 // 13: nicecms.media.v1.StackImage
	(*UploadDocumentReq_UploadDocumentMetadata)(nil),   // 14: nicecms.media.v1.UploadDocumentReq.UploadDocumentMetadata
	(*ReplaceDocumentReq_ReplaceDocumentMetadata)(nil), // 15: nicecms.media.v1.ReplaceDocumentReq.ReplaceDocumentMetadata
	(*UploadImageReq_UploadImageMetadata)(nil),         // 16: nicecms.media.v1.UploadImageReq.UploadImageMetadata
	(*ReplaceImageReq_ReplaceImageMetadata)(nil),       // 17: nicecms.media.v1.ReplaceImageReq.ReplaceImageMetadata
	(*v1.UUID)(nil),                                    // 18: nicecms.common.v1.UUID
	(*v1.NameLookup)(nil),                              // 19: nicecms.common.v1.NameLookup
	(*v1.LookupResp)(nil),                              // 20: nicecms.common.v1.LookupResp
}
var file_media_proto_depIdxs = []int32{
	0,  // 0: nicecms.media.v1.StorageImage.file:type_name -> nicecms.media.v1.StorageFile
	0,  // 1: nicecms.media.v1.StorageDocument.file:type_name -> nicecms.media.v1.StorageFile
	14, // 2: nicecms.media.v1.UploadDocumentReq.metadata:type_name -> nicecms.media.v1.UploadDocumentReq.UploadDocumentMetadata
	15, // 3: nicecms.media.v1.ReplaceDocumentReq.metadata:type_name -> nicecms.media.v1.ReplaceDocumentReq.ReplaceDocumentMetadata
	18, // 4: nicecms.media.v1.Shelf.id:type_name -> nicecms.common.v1.UUID
	6,  // 5: nicecms.media.v1.Shelf.documents:type_name -> nicecms.media.v1.ShelfDocument
	2,  // 6: nicecms.media.v1.ShelfDocument.document:type_name -> nicecms.media.v1.StorageDocument
	18, // 7: nicecms.media.v1.ShelfDocument.id:type_name -> nicecms.common.v1.UUID
	18, // 8: nicecms.media.v1.LookupGalleryStackByNameReq.galleryId:type_name -> nicecms.common.v1.UUID
	16, // 9: nicecms.media.v1.UploadImageReq.metadata:type_name -> nicecms.media.v1.UploadImageReq.UploadImageMetadata
	17, // 10: nicecms.media.v1.ReplaceImageReq.metadata:type_name -> nicecms.media.v1.ReplaceImageReq.ReplaceImageMetadata
	18, // 11: nicecms.media.v1.FetchGalleryReq.id:type_name -> nicecms.common.v1.UUID
	18, // 12: nicecms.media.v1.Gallery.id:type_name -> nicecms.common.v1.UUID
	12, // 13: nicecms.media.v1.Gallery.stacks:type_name -> nicecms.media.v1.Stack
	18, // 14: nicecms.media.v1.Stack.id:type_name -> nicecms.common.v1.UUID
	13, // 15: nicecms.media.v1.Stack.images:type_name -> nicecms.media.v1.StackImage
	1,  // 16: nicecms.media.v1.StackImage.image:type_name -> nicecms.media.v1.StorageImage
	18, // 17: nicecms.media.v1.UploadDocumentReq.UploadDocumentMetadata.shelfId:type_name -> nicecms.common.v1.UUID
	18, // 18: nicecms.media.v1.ReplaceDocumentReq.ReplaceDocumentMetadata.shelfId:type_name -> nicecms.common.v1.UUID
	18, // 19: nicecms.media.v1.ReplaceDocumentReq.ReplaceDocumentMetadata.documentId:type_name -> nicecms.common.v1.UUID
	18, // 20: nicecms.media.v1.UploadImageReq.UploadImageMetadata.galleryId:type_name -> nicecms.common.v1.UUID
	18, // 21: nicecms.media.v1.ReplaceImageReq.ReplaceImageMetadata.galleryId:type_name -> nicecms.common.v1.UUID
	18, // 22: nicecms.media.v1.ReplaceImageReq.ReplaceImageMetadata.stackId:type_name -> nicecms.common.v1.UUID
	19, // 23: nicecms.media.v1.MediaService.LookupShelfByName:input_type -> nicecms.common.v1.NameLookup
	3,  // 24: nicecms.media.v1.MediaService.UploadDocument:input_type -> nicecms.media.v1.UploadDocumentReq
	4,  // 25: nicecms.media.v1.MediaService.ReplaceDocument:input_type -> nicecms.media.v1.ReplaceDocumentReq
	19, // 26: nicecms.media.v1.MediaService.LookupGalleryByName:input_type -> nicecms.common.v1.NameLookup
	7,  // 27: nicecms.media.v1.MediaService.LookupGalleryStackByName:input_type -> nicecms.media.v1.LookupGalleryStackByNameReq
	8,  // 28: nicecms.media.v1.MediaService.UploadImage:input_type -> nicecms.media.v1.UploadImageReq
	9,  // 29: nicecms.media.v1.MediaService.ReplaceImage:input_type -> nicecms.media.v1.ReplaceImageReq
	10, // 30: nicecms.media.v1.MediaService.FetchGallery:input_type -> nicecms.media.v1.FetchGalleryReq
	20, // 31: nicecms.media.v1.MediaService.LookupShelfByName:output_type -> nicecms.common.v1.LookupResp
	6,  // 32: nicecms.media.v1.MediaService.UploadDocument:output_type -> nicecms.media.v1.ShelfDocument
	6,  // 33: nicecms.media.v1.MediaService.ReplaceDocument:output_type -> nicecms.media.v1.ShelfDocument
	20, // 34: nicecms.media.v1.MediaService.LookupGalleryByName:output_type -> nicecms.common.v1.LookupResp
	20, // 35: nicecms.media.v1.MediaService.LookupGalleryStackByName:output_type -> nicecms.common.v1.LookupResp
	12, // 36: nicecms.media.v1.MediaService.UploadImage:output_type -> nicecms.media.v1.Stack
	12, // 37: nicecms.media.v1.MediaService.ReplaceImage:output_type -> nicecms.media.v1.Stack
	11, // 38: nicecms.media.v1.MediaService.FetchGallery:output_type -> nicecms.media.v1.Gallery
	31, // [31:39] is the sub-list for method output_type
	23, // [23:31] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_media_proto_init() }
func file_media_proto_init() {
	if File_media_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_media_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadDocumentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceDocumentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shelf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShelfDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupGalleryStackByNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchGalleryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gallery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadDocumentReq_UploadDocumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceDocumentReq_ReplaceDocumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageReq_UploadImageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceImageReq_ReplaceImageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_media_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*UploadDocumentReq_Metadata)(nil),
		(*UploadDocumentReq_Chunk)(nil),
	}
	file_media_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ReplaceDocumentReq_Metadata)(nil),
		(*ReplaceDocumentReq_Chunk)(nil),
	}
	file_media_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*UploadImageReq_Metadata)(nil),
		(*UploadImageReq_Chunk)(nil),
	}
	file_media_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ReplaceImageReq_Metadata)(nil),
		(*ReplaceImageReq_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_media_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_media_proto_goTypes,
		DependencyIndexes: file_media_proto_depIdxs,
		MessageInfos:      file_media_proto_msgTypes,
	}.Build()
	File_media_proto = out.File
	file_media_proto_rawDesc = nil
	file_media_proto_goTypes = nil
	file_media_proto_depIdxs = nil
}
