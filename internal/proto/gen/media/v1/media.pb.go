// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.3
// source: media.proto

package protomedia

import (
	v1 "github.com/modernice/nice-cms/internal/proto/gen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StorageFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Disk     string   `protobuf:"bytes,2,opt,name=disk,proto3" json:"disk,omitempty"`
	Path     string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Filesize int64    `protobuf:"varint,4,opt,name=filesize,proto3" json:"filesize,omitempty"`
	Tags     []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *StorageFile) Reset() {
	*x = StorageFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageFile) ProtoMessage() {}

func (x *StorageFile) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageFile.ProtoReflect.Descriptor instead.
func (*StorageFile) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{0}
}

func (x *StorageFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StorageFile) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

func (x *StorageFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *StorageFile) GetFilesize() int64 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

func (x *StorageFile) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type StorageImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File   *StorageFile `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Width  int64        `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height int64        `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *StorageImage) Reset() {
	*x = StorageImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageImage) ProtoMessage() {}

func (x *StorageImage) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageImage.ProtoReflect.Descriptor instead.
func (*StorageImage) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{1}
}

func (x *StorageImage) GetFile() *StorageFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *StorageImage) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *StorageImage) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type StorageDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *StorageFile `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *StorageDocument) Reset() {
	*x = StorageDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageDocument) ProtoMessage() {}

func (x *StorageDocument) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageDocument.ProtoReflect.Descriptor instead.
func (*StorageDocument) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{2}
}

func (x *StorageDocument) GetFile() *StorageFile {
	if x != nil {
		return x.File
	}
	return nil
}

type LookupShelfByNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LookupShelfByNameReq) Reset() {
	*x = LookupShelfByNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupShelfByNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupShelfByNameReq) ProtoMessage() {}

func (x *LookupShelfByNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupShelfByNameReq.ProtoReflect.Descriptor instead.
func (*LookupShelfByNameReq) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{3}
}

func (x *LookupShelfByNameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LookupShelfResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Found      bool     `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	DocumentId *v1.UUID `protobuf:"bytes,2,opt,name=documentId,proto3" json:"documentId,omitempty"`
}

func (x *LookupShelfResp) Reset() {
	*x = LookupShelfResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupShelfResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupShelfResp) ProtoMessage() {}

func (x *LookupShelfResp) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupShelfResp.ProtoReflect.Descriptor instead.
func (*LookupShelfResp) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{4}
}

func (x *LookupShelfResp) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *LookupShelfResp) GetDocumentId() *v1.UUID {
	if x != nil {
		return x.DocumentId
	}
	return nil
}

type UploadDocumentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UploadData:
	//	*UploadDocumentReq_Metadata
	//	*UploadDocumentReq_Chunk
	UploadData isUploadDocumentReq_UploadData `protobuf_oneof:"upload_data"`
}

func (x *UploadDocumentReq) Reset() {
	*x = UploadDocumentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDocumentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDocumentReq) ProtoMessage() {}

func (x *UploadDocumentReq) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDocumentReq.ProtoReflect.Descriptor instead.
func (*UploadDocumentReq) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{5}
}

func (m *UploadDocumentReq) GetUploadData() isUploadDocumentReq_UploadData {
	if m != nil {
		return m.UploadData
	}
	return nil
}

func (x *UploadDocumentReq) GetMetadata() *UploadDocumentMetadata {
	if x, ok := x.GetUploadData().(*UploadDocumentReq_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *UploadDocumentReq) GetChunk() []byte {
	if x, ok := x.GetUploadData().(*UploadDocumentReq_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isUploadDocumentReq_UploadData interface {
	isUploadDocumentReq_UploadData()
}

type UploadDocumentReq_Metadata struct {
	Metadata *UploadDocumentMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type UploadDocumentReq_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*UploadDocumentReq_Metadata) isUploadDocumentReq_UploadData() {}

func (*UploadDocumentReq_Chunk) isUploadDocumentReq_UploadData() {}

type UploadDocumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShelfId    *v1.UUID `protobuf:"bytes,1,opt,name=shelfId,proto3" json:"shelfId,omitempty"`
	UniqueName string   `protobuf:"bytes,2,opt,name=uniqueName,proto3" json:"uniqueName,omitempty"`
	Name       string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Disk       string   `protobuf:"bytes,4,opt,name=disk,proto3" json:"disk,omitempty"`
	Path       string   `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *UploadDocumentMetadata) Reset() {
	*x = UploadDocumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadDocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDocumentMetadata) ProtoMessage() {}

func (x *UploadDocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDocumentMetadata.ProtoReflect.Descriptor instead.
func (*UploadDocumentMetadata) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{6}
}

func (x *UploadDocumentMetadata) GetShelfId() *v1.UUID {
	if x != nil {
		return x.ShelfId
	}
	return nil
}

func (x *UploadDocumentMetadata) GetUniqueName() string {
	if x != nil {
		return x.UniqueName
	}
	return ""
}

func (x *UploadDocumentMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadDocumentMetadata) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

func (x *UploadDocumentMetadata) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ReplaceDocumentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReplaceData:
	//	*ReplaceDocumentReq_Metadata
	//	*ReplaceDocumentReq_Chunk
	ReplaceData isReplaceDocumentReq_ReplaceData `protobuf_oneof:"replace_data"`
}

func (x *ReplaceDocumentReq) Reset() {
	*x = ReplaceDocumentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceDocumentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceDocumentReq) ProtoMessage() {}

func (x *ReplaceDocumentReq) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceDocumentReq.ProtoReflect.Descriptor instead.
func (*ReplaceDocumentReq) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{7}
}

func (m *ReplaceDocumentReq) GetReplaceData() isReplaceDocumentReq_ReplaceData {
	if m != nil {
		return m.ReplaceData
	}
	return nil
}

func (x *ReplaceDocumentReq) GetMetadata() *ReplaceDocumentMetadata {
	if x, ok := x.GetReplaceData().(*ReplaceDocumentReq_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *ReplaceDocumentReq) GetChunk() []byte {
	if x, ok := x.GetReplaceData().(*ReplaceDocumentReq_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isReplaceDocumentReq_ReplaceData interface {
	isReplaceDocumentReq_ReplaceData()
}

type ReplaceDocumentReq_Metadata struct {
	Metadata *ReplaceDocumentMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type ReplaceDocumentReq_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*ReplaceDocumentReq_Metadata) isReplaceDocumentReq_ReplaceData() {}

func (*ReplaceDocumentReq_Chunk) isReplaceDocumentReq_ReplaceData() {}

type ReplaceDocumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShelfId    *v1.UUID `protobuf:"bytes,1,opt,name=shelfId,proto3" json:"shelfId,omitempty"`
	DocumentId *v1.UUID `protobuf:"bytes,2,opt,name=documentId,proto3" json:"documentId,omitempty"`
}

func (x *ReplaceDocumentMetadata) Reset() {
	*x = ReplaceDocumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceDocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceDocumentMetadata) ProtoMessage() {}

func (x *ReplaceDocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceDocumentMetadata.ProtoReflect.Descriptor instead.
func (*ReplaceDocumentMetadata) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{8}
}

func (x *ReplaceDocumentMetadata) GetShelfId() *v1.UUID {
	if x != nil {
		return x.ShelfId
	}
	return nil
}

func (x *ReplaceDocumentMetadata) GetDocumentId() *v1.UUID {
	if x != nil {
		return x.DocumentId
	}
	return nil
}

type Shelf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *v1.UUID         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Documents []*ShelfDocument `protobuf:"bytes,3,rep,name=documents,proto3" json:"documents,omitempty"`
}

func (x *Shelf) Reset() {
	*x = Shelf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shelf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shelf) ProtoMessage() {}

func (x *Shelf) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shelf.ProtoReflect.Descriptor instead.
func (*Shelf) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{9}
}

func (x *Shelf) GetId() *v1.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Shelf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Shelf) GetDocuments() []*ShelfDocument {
	if x != nil {
		return x.Documents
	}
	return nil
}

type ShelfDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document   *StorageDocument `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	Id         *v1.UUID         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	UniqueName string           `protobuf:"bytes,3,opt,name=uniqueName,proto3" json:"uniqueName,omitempty"`
}

func (x *ShelfDocument) Reset() {
	*x = ShelfDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShelfDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShelfDocument) ProtoMessage() {}

func (x *ShelfDocument) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShelfDocument.ProtoReflect.Descriptor instead.
func (*ShelfDocument) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{10}
}

func (x *ShelfDocument) GetDocument() *StorageDocument {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *ShelfDocument) GetId() *v1.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ShelfDocument) GetUniqueName() string {
	if x != nil {
		return x.UniqueName
	}
	return ""
}

var File_media_proto protoreflect.FileDescriptor

var file_media_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6e,
	0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x1a,
	0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0x6f, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x44, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x0f, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53,
	0x68, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x37,
	0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x0d, 0x0a,
	0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa7, 0x01, 0x0a,
	0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x68, 0x65, 0x6c, 0x66,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63,
	0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x07, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69,
	0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x47, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x0e,
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x85,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x68,
	0x65, 0x6c, 0x66, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69,
	0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x73, 0x68, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x53, 0x68, 0x65, 0x6c, 0x66,
	0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x97, 0x01, 0x0a,
	0x0d, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x69, 0x63, 0x65,
	0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0xa4, 0x02, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x2e, 0x6e,
	0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x68,
	0x65, 0x6c, 0x66, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x6e, 0x69, 0x63, 0x65,
	0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x28,
	0x01, 0x12, 0x5a, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x6e, 0x69, 0x63, 0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6e, 0x69, 0x63,
	0x65, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68,
	0x65, 0x6c, 0x66, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x01, 0x42, 0x46, 0x5a,
	0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x72, 0x6e, 0x69, 0x63, 0x65, 0x2f, 0x6e, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6d, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_media_proto_rawDescOnce sync.Once
	file_media_proto_rawDescData = file_media_proto_rawDesc
)

func file_media_proto_rawDescGZIP() []byte {
	file_media_proto_rawDescOnce.Do(func() {
		file_media_proto_rawDescData = protoimpl.X.CompressGZIP(file_media_proto_rawDescData)
	})
	return file_media_proto_rawDescData
}

var file_media_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_media_proto_goTypes = []interface{}{
	(*StorageFile)(nil),             // 0: nicecms.media.v1.StorageFile
	(*StorageImage)(nil),            // 1: nicecms.media.v1.StorageImage
	(*StorageDocument)(nil),         // 2: nicecms.media.v1.StorageDocument
	(*LookupShelfByNameReq)(nil),    // 3: nicecms.media.v1.LookupShelfByNameReq
	(*LookupShelfResp)(nil),         // 4: nicecms.media.v1.LookupShelfResp
	(*UploadDocumentReq)(nil),       // 5: nicecms.media.v1.UploadDocumentReq
	(*UploadDocumentMetadata)(nil),  // 6: nicecms.media.v1.UploadDocumentMetadata
	(*ReplaceDocumentReq)(nil),      // 7: nicecms.media.v1.ReplaceDocumentReq
	(*ReplaceDocumentMetadata)(nil), // 8: nicecms.media.v1.ReplaceDocumentMetadata
	(*Shelf)(nil),                   // 9: nicecms.media.v1.Shelf
	(*ShelfDocument)(nil),           // 10: nicecms.media.v1.ShelfDocument
	(*v1.UUID)(nil),                 // 11: nicecms.common.v1.UUID
}
var file_media_proto_depIdxs = []int32{
	0,  // 0: nicecms.media.v1.StorageImage.file:type_name -> nicecms.media.v1.StorageFile
	0,  // 1: nicecms.media.v1.StorageDocument.file:type_name -> nicecms.media.v1.StorageFile
	11, // 2: nicecms.media.v1.LookupShelfResp.documentId:type_name -> nicecms.common.v1.UUID
	6,  // 3: nicecms.media.v1.UploadDocumentReq.metadata:type_name -> nicecms.media.v1.UploadDocumentMetadata
	11, // 4: nicecms.media.v1.UploadDocumentMetadata.shelfId:type_name -> nicecms.common.v1.UUID
	8,  // 5: nicecms.media.v1.ReplaceDocumentReq.metadata:type_name -> nicecms.media.v1.ReplaceDocumentMetadata
	11, // 6: nicecms.media.v1.ReplaceDocumentMetadata.shelfId:type_name -> nicecms.common.v1.UUID
	11, // 7: nicecms.media.v1.ReplaceDocumentMetadata.documentId:type_name -> nicecms.common.v1.UUID
	11, // 8: nicecms.media.v1.Shelf.id:type_name -> nicecms.common.v1.UUID
	10, // 9: nicecms.media.v1.Shelf.documents:type_name -> nicecms.media.v1.ShelfDocument
	2,  // 10: nicecms.media.v1.ShelfDocument.document:type_name -> nicecms.media.v1.StorageDocument
	11, // 11: nicecms.media.v1.ShelfDocument.id:type_name -> nicecms.common.v1.UUID
	3,  // 12: nicecms.media.v1.MediaService.LookupShelfByName:input_type -> nicecms.media.v1.LookupShelfByNameReq
	5,  // 13: nicecms.media.v1.MediaService.UploadDocument:input_type -> nicecms.media.v1.UploadDocumentReq
	7,  // 14: nicecms.media.v1.MediaService.ReplaceDocument:input_type -> nicecms.media.v1.ReplaceDocumentReq
	4,  // 15: nicecms.media.v1.MediaService.LookupShelfByName:output_type -> nicecms.media.v1.LookupShelfResp
	10, // 16: nicecms.media.v1.MediaService.UploadDocument:output_type -> nicecms.media.v1.ShelfDocument
	10, // 17: nicecms.media.v1.MediaService.ReplaceDocument:output_type -> nicecms.media.v1.ShelfDocument
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_media_proto_init() }
func file_media_proto_init() {
	if File_media_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_media_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupShelfByNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupShelfResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadDocumentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadDocumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceDocumentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceDocumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shelf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShelfDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_media_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*UploadDocumentReq_Metadata)(nil),
		(*UploadDocumentReq_Chunk)(nil),
	}
	file_media_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ReplaceDocumentReq_Metadata)(nil),
		(*ReplaceDocumentReq_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_media_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_media_proto_goTypes,
		DependencyIndexes: file_media_proto_depIdxs,
		MessageInfos:      file_media_proto_msgTypes,
	}.Build()
	File_media_proto = out.File
	file_media_proto_rawDesc = nil
	file_media_proto_goTypes = nil
	file_media_proto_depIdxs = nil
}
