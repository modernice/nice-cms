// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protomedia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediaServiceClient is the client API for MediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaServiceClient interface {
	LookupShelfByName(ctx context.Context, in *LookupShelfByNameReq, opts ...grpc.CallOption) (*LookupShelfResp, error)
	UploadDocument(ctx context.Context, opts ...grpc.CallOption) (MediaService_UploadDocumentClient, error)
	ReplaceDocument(ctx context.Context, opts ...grpc.CallOption) (MediaService_ReplaceDocumentClient, error)
}

type mediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaServiceClient(cc grpc.ClientConnInterface) MediaServiceClient {
	return &mediaServiceClient{cc}
}

func (c *mediaServiceClient) LookupShelfByName(ctx context.Context, in *LookupShelfByNameReq, opts ...grpc.CallOption) (*LookupShelfResp, error) {
	out := new(LookupShelfResp)
	err := c.cc.Invoke(ctx, "/nicecms.media.v1.MediaService/LookupShelfByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) UploadDocument(ctx context.Context, opts ...grpc.CallOption) (MediaService_UploadDocumentClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaService_ServiceDesc.Streams[0], "/nicecms.media.v1.MediaService/UploadDocument", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaServiceUploadDocumentClient{stream}
	return x, nil
}

type MediaService_UploadDocumentClient interface {
	Send(*UploadDocumentReq) error
	CloseAndRecv() (*ShelfDocument, error)
	grpc.ClientStream
}

type mediaServiceUploadDocumentClient struct {
	grpc.ClientStream
}

func (x *mediaServiceUploadDocumentClient) Send(m *UploadDocumentReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaServiceUploadDocumentClient) CloseAndRecv() (*ShelfDocument, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ShelfDocument)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mediaServiceClient) ReplaceDocument(ctx context.Context, opts ...grpc.CallOption) (MediaService_ReplaceDocumentClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaService_ServiceDesc.Streams[1], "/nicecms.media.v1.MediaService/ReplaceDocument", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaServiceReplaceDocumentClient{stream}
	return x, nil
}

type MediaService_ReplaceDocumentClient interface {
	Send(*ReplaceDocumentReq) error
	CloseAndRecv() (*ShelfDocument, error)
	grpc.ClientStream
}

type mediaServiceReplaceDocumentClient struct {
	grpc.ClientStream
}

func (x *mediaServiceReplaceDocumentClient) Send(m *ReplaceDocumentReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaServiceReplaceDocumentClient) CloseAndRecv() (*ShelfDocument, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ShelfDocument)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaServiceServer is the server API for MediaService service.
// All implementations must embed UnimplementedMediaServiceServer
// for forward compatibility
type MediaServiceServer interface {
	LookupShelfByName(context.Context, *LookupShelfByNameReq) (*LookupShelfResp, error)
	UploadDocument(MediaService_UploadDocumentServer) error
	ReplaceDocument(MediaService_ReplaceDocumentServer) error
	mustEmbedUnimplementedMediaServiceServer()
}

// UnimplementedMediaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMediaServiceServer struct {
}

func (UnimplementedMediaServiceServer) LookupShelfByName(context.Context, *LookupShelfByNameReq) (*LookupShelfResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupShelfByName not implemented")
}
func (UnimplementedMediaServiceServer) UploadDocument(MediaService_UploadDocumentServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadDocument not implemented")
}
func (UnimplementedMediaServiceServer) ReplaceDocument(MediaService_ReplaceDocumentServer) error {
	return status.Errorf(codes.Unimplemented, "method ReplaceDocument not implemented")
}
func (UnimplementedMediaServiceServer) mustEmbedUnimplementedMediaServiceServer() {}

// UnsafeMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaServiceServer will
// result in compilation errors.
type UnsafeMediaServiceServer interface {
	mustEmbedUnimplementedMediaServiceServer()
}

func RegisterMediaServiceServer(s grpc.ServiceRegistrar, srv MediaServiceServer) {
	s.RegisterService(&MediaService_ServiceDesc, srv)
}

func _MediaService_LookupShelfByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupShelfByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).LookupShelfByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nicecms.media.v1.MediaService/LookupShelfByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).LookupShelfByName(ctx, req.(*LookupShelfByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_UploadDocument_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaServiceServer).UploadDocument(&mediaServiceUploadDocumentServer{stream})
}

type MediaService_UploadDocumentServer interface {
	SendAndClose(*ShelfDocument) error
	Recv() (*UploadDocumentReq, error)
	grpc.ServerStream
}

type mediaServiceUploadDocumentServer struct {
	grpc.ServerStream
}

func (x *mediaServiceUploadDocumentServer) SendAndClose(m *ShelfDocument) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaServiceUploadDocumentServer) Recv() (*UploadDocumentReq, error) {
	m := new(UploadDocumentReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MediaService_ReplaceDocument_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaServiceServer).ReplaceDocument(&mediaServiceReplaceDocumentServer{stream})
}

type MediaService_ReplaceDocumentServer interface {
	SendAndClose(*ShelfDocument) error
	Recv() (*ReplaceDocumentReq, error)
	grpc.ServerStream
}

type mediaServiceReplaceDocumentServer struct {
	grpc.ServerStream
}

func (x *mediaServiceReplaceDocumentServer) SendAndClose(m *ShelfDocument) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaServiceReplaceDocumentServer) Recv() (*ReplaceDocumentReq, error) {
	m := new(ReplaceDocumentReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaService_ServiceDesc is the grpc.ServiceDesc for MediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nicecms.media.v1.MediaService",
	HandlerType: (*MediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupShelfByName",
			Handler:    _MediaService_LookupShelfByName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadDocument",
			Handler:       _MediaService_UploadDocument_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReplaceDocument",
			Handler:       _MediaService_ReplaceDocument_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "media.proto",
}
